应用界面：根布局是View，然后嵌套一个可组合项，由一个个组合组成，组合之间相互嵌套
         组合：描述应用界面，通过运行可组合项来生成，是可组合项的树结构。
              组合与可组合项的关系：组合是通过运行可组合项生成的树结构。是一个抽象的概念，方便描述应用界面。
      组合更新：组合只能通过初始组合生成且只能通过重组进行更新。重组是修改组合的唯一方式。
         重组：1.当Compose首次运行可组合项时，在初始组合期间，它将跟踪为了描述组合中的界面而调用的可组合项，当应用的状态发生变化时，
              Compose重新执行可能因状态更改而更改的可组合项，然后更新组合以反映所有更改。
              2. 重组通常由对 State<T> 对象的更改触发。Compose 会跟踪这些操作，并运行组合中读取该特定 State<T> 的所有可组合项以及这些操作调用的无法跳过的所有可组合项。

界面的生命周期：
      进入组合，执行0次或多次重组，退出组合。
           说明：可组合项的生命周期比视图、activity 和 fragment 的生命周期更简单。当可组合项需要管理生命周期确实更复杂的外部资源或与之互动时，应使用效应。
                如果某一可组合项多次被调用，在组合中将放置多个实例。每次调用在组合中都有自己的生命周期。

组合的生成过程
       组合中可组合项的实例由其调用点（是调用可组合项的源代码位置。这会影响其在组合中的位置，因此会影响界面树）进行标识，Compose 编译器将每个调用点都视为不同的调用点，
       从多个调用站点调用可组合项会在组合中创建多个可组合项实例，每个调用都有唯一的调用点和源位置，编译器将使用它们对调用进行唯一识别；
       在重组期间，可组合项调用的可组合项与上个组合期间调用的可组合项不同，Compose将确定调用或未调用的可组合项，对于在两次组合中均调用的可组合项，如果输入未更改，Compose将避免重组这些可组合项。
       保留身份（remember）对于将附带效应与可组合项相关联十分重要，这样它们才能成功完成，而不是每次重组时都重新启动


   重组：
     重组的优化：添加额外信息以促进智能重组
            多次调用同一可组合项也会多次将其添加到组合中，如果从同一个调用点多次调用某个可组合项，会出现什么情况呢？
              问题：Compose 就无法唯一标识对该可组合项的每次调用
              解决：除了调用点之外，还会使用执行顺序来区分实例
                  新问题：如果因在调用点列表顶部或中间新增内容，移除数据或对列表进行重新排序而导致列表数据发生改变。
                         将导致输入参数在列表中的位置已更改的所有子项调用发生重组
                         如果子项中使用了附带效应，并在使用附带效应的过程中发生重组，系统就会取消重组并重新开始。
                  解决思路： 理想情况下，认为 子项 实例与传递到该实例的 数据 相关联。如果列表进行重新排序，以比较方式在组合树中对实例进行重新排序，而不是将每个子可组合项与不同数据实例进行重组。
                  解决：
                        使用一些值来标识树的给定部分：key 可组合项。
                             通过调用带有一个或多个传入值的键可组合项来封装代码块，这些值将被组合以用于在组合中标识该实例
                             key 的值不必是全局唯一的，只需要在调用点处调用可组合项的作用域内确保其唯一性即可。
                             核心：使用key可组合项帮助Compose识别组合中的可组合项实例。当从同一个调用点调用多个可组合项，且这些可组合项包含附带效应或内部状态时，这一点非常重要。

                  一些可组合项提供对 key 可组合项的内置支持。
                      例如：LazyColumn 接受在 items DSL 中指定自定义 key
                          @Composable
                          fun MoviesScreen(movies: List<Movie>) {
                              LazyColumn {
                                  items(movies, key = { movie -> movie.id }) { movie ->
                                      MovieOverview(movie)
                                  }
                              }
                          }
            ==================================================

            @Composable
            fun MoviesScreen(movies: List<Movie>) {
                Column {
                    for (movie in movies) {
                        key(movie.id) { // Unique ID for this movie
                            MovieOverview(movie)
                        }
                    }
                }
            }

            @Composable
            fun MovieOverview(movie: Movie) {
                Column {
                    // Side effect explained later in the docs. If MovieOverview
                    // recomposes, while fetching the image is in progress,
                    // it is cancelled and restarted.
                    val image = loadNetworkImage(movie.url)
                    MovieHeader(image)

                    /* ... */
                }
            }

     重组的特征：如果输入未更改，则跳过
            概念： 如果组合中已有可组合项，当作为参数传递到可组合项的所有类型都处于稳定状态时，系统会根据可组合项在界面树中的位置来比较参数值，以确保相等性。如果所有值自上次调用后未发生变化，则会跳过重组。
            要点：如果可组合项中所有输入都稳定并且没有更改，Compose 将跳过重组可组合项。比较使用了 equals 方法。

        稳定类型
            理解：针对的是类型，是对象类型，针对的是Compose。特别是某个公共属性发生变化，组合将收到通知，说明该属性被Compose观察。

            协定：对于相同的两个实例，其 equals 的结果将始终相同。
                 如果类型的某个公共属性发生变化，组合将收到通知。
                 所有公共属性类型也都是稳定
            默认归入稳定类型的通用类型
                即使未使用 @Stable 注解来显式标记为稳定的类型，Compose 编译器也会将其视为稳定的类型。
                所有这些类型都可以遵循稳定协定，因为它们是不可变的。由于不可变类型绝不会发生变化，它们就永远不必通知组合更改方面的信息，因此遵循该协定
                理解：不可变针对是Compose，它们不被Compose观察。即时变化也通知不了Compose，对Compose来说是不变的。

                所有基元值类型：Boolean、Int、Long、Float、Char 等。
                字符串
                所有函数类型 (lambda)
                =
            注意：
               所有深层不可变的类型都可以被安全地视为稳定类型

            MutableState 类型
               是一种众所周知稳定但可变的类型
               如果 MutableState 中存储了值，状态对象整体会被视为稳定对象，因为 State 的 .value 属性如有任何更改，Compose 就会收到通知。


        不稳定类型
            概念
              接口通常被视为不稳定类型
              具有可变公共属性的类型（实现可能不可变）的类型也被视为不稳定类型。

            强制Compose视为稳定类型
              如果 Compose 无法推断类型是否稳定，但想强制 Compose 将其视为稳定类型，请使用 @Stable 注解对其进行标记
              目的：让 Compose 优先选择智能重组

            要点：如果 Compose 无法推断某个类型的稳定性，请为该类型添加 @Stable 注解，让 Compose 优先选择智能重组。

            示例：
            // Marking the type as stable to favor skipping and smart recompositions.
            @Stable
            interface UiState<T : Result<T>> {
                val value: T?
                val exception: Throwable?

                val hasError: Boolean
                    get() = exception != null
            }

======================================================
Compose中帧渲染:将可组合项转换为用户可见界面的过程
    Compose通过三个不同的“阶段”来渲染帧，与Android View 系统 三个主要阶段：测量、布局和绘制类似
    组合：要显示什么样的界面。 Compose 运行可组合函数并创建界面说明。

    布局：要放置界面的位置。该阶段包含两个步骤：测量和放置。对于布局树中的每个节点，布局元素都会根据 2D 坐标来测量并放置自己及其所有子元素。

    绘制：渲染的方式。将界面元素绘制到画布（通常是设备屏幕）中

    这些阶段通常会以相同的顺序执行，让数据能够沿一个方向（从组合到布局，再到绘制）生成帧（也称为单向数据流）

    BoxWithConstraints 以及 LazyColumn 和 LazyRow 是其子级的组合取决于父级的布局阶段。

    性能保障
       Compose 会避免在所有这些阶段中重复执行根据相同输入计算出相同结果的工作。如果可以重复使用前面计算出的结果，Compose 会跳过对应的可组合函数；如果没有必要，Compose 界面不会对整个树进行重新布局或重新绘制。
       Compose 只会执行更新界面所需的最低限度的工作。之所以能够实现这种优化，是因为 Compose 会跟踪不同阶段中的状态读取。

    状态读取
       使用 mutableStateOf() 创建
          直接访问 value 属性
          使用 Kotlin 属性委托，属性委托在后台使用“getter”和“setter”函数来访问和更新状态的 value。只有当将相应属性作为值引用时，系统才会调用这些 getter 和 setter 函数（而不会在创建属性时调用），等效使用value属性。

       状态读取：是指上述任一等效访问方法

       当在上述任一阶段中读取快照状态值时，Compose 会自动跟踪在系统读取该值时正在执行的操作。通过这项跟踪，Compose 能够在状态值更改时重新执行读取程序；此外，我们也是以这项跟踪为基础在 Compose 中实现了对状态的观察

       每个可以在读取状态发生更改时重新执行的代码块都是一个重启作用域。在不同阶段内，Compose 会跟踪状态值的更改和重启作用域。

    分阶段状态读取
        Compose 有 3 个主要阶段，并且 Compose 会跟踪在每个阶段中读取到的状态。这样一来，Compose 只需向需要对界面的每个受影响的元素执行工作的特定阶段发送通知即可。
        创建和存储状态实例的位置与阶段几乎没有什么关系，关键在于读取状态值的时间和位置。
     组合
        @Composable 函数或 lambda 代码块中的状态读取会影响组合阶段，并且可能会影响后续阶段
        当状态值发生更改时，Recomposer 会安排重新运行所有要读取相应状态值的可组合函数
        如果输入未更改，运行时可能会决定跳过部分或全部可组合函数。
        根据组合结果，Compose 界面会运行布局和绘制阶段。如果内容保持不变，并且大小和布局也未更改，界面可能会跳过这些阶段。
        var padding by remember { mutableStateOf(8.dp) }
        Text(
        text = "Hello",
        // The padding state is read in the composition phase
        // when the modifier is constructed.
        // Changes in padding will invoke recomposition.
        modifier = Modifier.padding(padding)
        )


     布局
        布局阶段包含两个步骤：测量和放置。
        测量步骤会运行传递给 Layout 可组合项的测量 lambda、LayoutModifier 接口的 MeasureScope.measure 方法，等等。
        放置步骤会运行 layout 函数的放置位置块、Modifier.offset { … } 的 lambda 块，等等。
        每个步骤的状态读取都会影响布局阶段，并且可能会影响绘制阶段。
            当状态值发生更改时，Compose 界面会安排布局阶段。如果大小或位置发生更改，界面还会运行绘制阶段。
        测量步骤和放置步骤分别具有单独的重启作用域，这意味着，放置步骤中的状态读取不会在此之前重新调用测量步骤。不过，这两个步骤通常是交织在一起的，因此在放置步骤中读取的状态可能会影响属于测量步骤的其他重启作用域。
        var offsetX by remember { mutableStateOf(8.dp) }
        Text(
        text = "Hello",
        modifier = Modifier.offset {
        // The offsetX state is read in the placement step
        // of the layout phase when the offset is calculated.
        // Changes in offsetX restart the layout.
        IntOffset(offsetX.roundToPx(), 0)
        }
        )


     绘制
        绘制代码期间的状态读取会影响绘制阶段。常见示例包括 Canvas()、Modifier.drawBehind 和 Modifier.drawWithContent。
        当状态值发生更改时，Compose 界面只会运行绘制阶段。
        var color by remember { mutableStateOf(Color.Red) }
        Canvas(modifier = modifier) {
        // The color state is read in the drawing phase
        // when the canvas is rendered.
        // Changes in color restart the drawing.
        drawRect(color)
        }

    读取优化
       由于 Compose 会执行局部状态读取跟踪，因此我们可以在适当阶段读取每个状态，从而尽可能降低需要执行的工作量。
       建议：尝试将状态读取定位到尽可能靠后的阶段，从而尽可能降低 Compose 需要执行的工作量。
       通常情况下，我们绝对有必要在组合阶段读取状态。即便如此，在某些情况下，我们也可以通过过滤状态更改来尽可能减少重组次数。如需了解详情，请参阅 derivedStateOf：将一个或多个状态对象转换为其他状态。

    重组循环(循环阶段依赖项)
        系统始终按照相同的顺序来调用 Compose 的各个阶段，并且无法在同一帧中后退。不过，这并未禁止应用跨不同的帧进入组合循环。
        问题
           如果没有在单个帧中达到“最终”布局。该代码依赖发生多个帧，它会执行不必要的工作，并导致界面在用户屏幕上跳动。

            Modifier.onSizeChanged()、onGloballyPositioned() 或一些其他布局操作
                    更新某种状态
                    使用该状态作为对布局修饰符（padding()、height() 或类似元素）的输入
                    可能会重复

        解决
            一般原则是，对于应该以彼此相对的方式进行测量和放置的多个界面元素，我们要提供单一的可信来源。使用适当的布局基元或创建自定义布局意味着将最小的共享父级用作可以协调多个元素之间关系的可信来源。引入动态状态就违反了这一原则。


        Box {
            var imageHeightPx by remember { mutableStateOf(0) }

            Image(
                painter = painterResource(R.drawable.rectangle),
                contentDescription = "I'm above the text",
                modifier = Modifier
                    .fillMaxWidth()
                    .onSizeChanged { size ->
                        // Don't do this
                        imageHeightPx = size.height
                    }
            )

            Text(
                text = "I'm below the image",
                modifier = Modifier.padding(
                    top = with(LocalDensity.current) { imageHeightPx.toDp() }
                )
            )
        }


===========================================================================================
附带效应：

1.执行时机
LaunchedEffect
SideEffect
DisposableEffect

2.应用场景
rememberUpdateState


3.重启效应
================================
1.produceState：将非 Compose 状态转换为 Compose 状态

2.derivedStateOf：将一个或多个状态对象转换为其他状态

3.snapshotFlow ：







produceState：将非 Compose 状态转换为 Compose 状态
produceState 会启动一个协程，该协程将作用域限定为可将值推送到返回的 State 的组合。使用此协程将非 Compose 状态转换为 Compose 状态，例如将外部订阅驱动的状态（如 Flow、LiveData 或 RxJava）引入组合。

该制作工具在 produceState 进入组合时启动，在其退出组合时取消。返回的 State 冲突；设置相同的值不会触发重组。

即使 produceState 创建了一个协程，它也可用于观察非挂起的数据源。如需移除对该数据源的订阅，请使用 awaitDispose 函数。

以下示例展示了如何使用 produceState 从网络加载图像。loadNetworkImage 可组合函数会返回可以在其他可组合项中使用的 State。


@Composable
fun loadNetworkImage(
    url: String,
    imageRepository: ImageRepository
): State<Result<Image>> {

    // Creates a State<T> with Result.Loading as initial value
    // If either `url` or `imageRepository` changes, the running producer
    // will cancel and will be re-launched with the new inputs.
    return produceState<Result<Image>>(initialValue = Result.Loading, url, imageRepository) {

        // In a coroutine, can make suspend calls
        val image = imageRepository.load(url)

        // Update State with either an Error or Success result.
        // This will trigger a recomposition where this State is read
        value = if (image == null) {
            Result.Error
        } else {
            Result.Success(image)
        }
    }
}
注意：您应采用常规 Kotlin 函数命名方式命名含返回值类型的可组合项，以小写字母开头。
要点：produceState 在后台充分利用其他效应！它使用 remember { mutableStateOf(initialValue) } 保留 result 变量，并在 LaunchedEffect 中触发 producer 块。每当 producer 块中的 value 更新时，result 状态都会更新为新值。

您可以基于现有 API 轻松创建自己的效应。

============================================================
derivedStateOf：将一个或多个状态对象转换为其他状态
如果某个状态是从其他状态对象计算或派生得出的，请使用 derivedStateOf。使用此函数可确保仅当计算中使用的状态之一发生变化时才会进行计算。

以下示例展示了基本的“待办事项”列表，其中具有用户定义的高优先级关键字的任务将首先显示：


@Composable
fun TodoList(highPriorityKeywords: List<String> = listOf("Review", "Unblock", "Compose")) {

    val todoTasks = remember { mutableStateListOf<String>() }

    // Calculate high priority tasks only when the todoTasks or highPriorityKeywords
    // change, not on every recomposition
    val highPriorityTasks by remember(highPriorityKeywords) {
        derivedStateOf { todoTasks.filter { it.containsWord(highPriorityKeywords) } }
    }

    Box(Modifier.fillMaxSize()) {
        LazyColumn {
            items(highPriorityTasks) { /* ... */ }
            items(todoTasks) { /* ... */ }
        }
        /* Rest of the UI where users can add elements to the list */
    }
}
在以上代码中，derivedStateOf 保证每当 todoTasks 发生变化时，系统都会执行 highPriorityTasks 计算，并相应地更新界面。如果 highPriorityKeywords 发生变化，系统将执行 remember 代码块，并且会创建新的派生状态对象并记住该对象，以代替旧的对象。由于执行过滤以计算 highPriorityTasks 的成本很高，因此应仅在任何列表发生更改时才执行，而不是在每次重组时都执行。

此外，更新 derivedStateOf 生成的状态不会导致可组合项在声明它的位置重组，Compose 仅会对返回状态为已读的可组合项（在本例中，指 LazyColumn 中的可组合项）进行重组。

该代码还假设 highPriorityKeywords 的变化频率显著低于 todoTasks。否则，该代码会使用 remember(todoTasks, highPriorityKeywords) 而不是 derivedStateOf。


============================================================
snapshotFlow：将 Compose 的 State 转换为 Flow
使用 snapshotFlow 将 State<T> 对象转换为冷 Flow。snapshotFlow 会在收集到块时运行该块，并发出从块中读取的 State 对象的结果。当在 snapshotFlow 块中读取的 State 对象之一发生变化时，如果新值与之前发出的值不相等，Flow 会向其收集器发出新值（此行为类似于 Flow.distinctUntilChanged 的行为）。

下列示例显示了一项附带效应，是系统在用户滚动经过要分析的列表的首个项目时记录下来的：


val listState = rememberLazyListState()

LazyColumn(state = listState) {
    // ...
}

LaunchedEffect(listState) {
    snapshotFlow { listState.firstVisibleItemIndex }
        .map { index -> index > 0 }
        .distinctUntilChanged()
        .filter { it == true }
        .collect {
            MyAnalyticsService.sendScrolledPastFirstItemEvent()
        }
}
在上方代码中，listState.firstVisibleItemIndex 被转换为一个 Flow，从而可以受益于 Flow 运算符的强大功能。







重启效应
Compose 中有一些效应（如 LaunchedEffect、produceState 或 DisposableEffect）会采用可变数量的参数和键来取消运行效应，并使用新的键启动一个新的效应。

这些 API 的典型形式是：


EffectName(restartIfThisKeyChanges, orThisKey, orThisKey, ...) { block }
由于此行为的细微差别，如果用于重启效应的参数不是适当的参数，可能会出现问题：

如果重启效应次数不够，可能会导致应用出现错误。
如果重启效应次数过多，效率可能不高。
一般来说，效应代码块中使用的可变和不可变变量应作为参数添加到效应可组合项中。除此之外，您还可以添加更多参数，以便强制重启效应。如果更改变量不应导致效应重启，则应将该变量封装在 rememberUpdatedState 中。如果由于变量封装在一个不含键的 remember 中使之没有发生变化，则无需将变量作为键传递给效应。

要点：应将效应中使用的变量添加为效应可组合项的参数，或使用 rememberUpdatedState。
在上面显示的 DisposableEffect 代码中，效应将其块中使用的 lifecycleOwner 作为参数，因为对它们的任何更改都会导致效应重新开始。


@Composable
fun HomeScreen(
    lifecycleOwner: LifecycleOwner = LocalLifecycleOwner.current,
    onStart: () -> Unit, // Send the 'started' analytics event
    onStop: () -> Unit // Send the 'stopped' analytics event
) {
    // These values never change in Composition
    val currentOnStart by rememberUpdatedState(onStart)
    val currentOnStop by rememberUpdatedState(onStop)

    DisposableEffect(lifecycleOwner) {
        val observer = LifecycleEventObserver { _, event ->
            /* ... */
        }

        lifecycleOwner.lifecycle.addObserver(observer)
        onDispose {
            lifecycleOwner.lifecycle.removeObserver(observer)
        }
    }
}
无需使用 currentOnStart 和 currentOnStop 作为 DisposableEffect 键，因为我们使用了 rememberUpdatedState，所以它们的值在组合中绝不会发生变化。如果您没有传递 lifecycleOwner 作为参数，并且它发生变化，那么 HomeScreen 会重组，但 DisposableEffect 不会被处理和重新开始。这会导致出现问题，因为此后会使用错误的 lifecycleOwner。

使用常量作为键
您可以使用 true 等常量作为效应键，使其遵循调用点的生命周期。它实际上具有有效的用例，如上面所示的 LaunchedEffect 示例。但在这样做之前，请审慎考虑，并确保您确实需要这么做。




















